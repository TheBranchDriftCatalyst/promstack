# yaml-language-server: $schema=https://raw.githubusercontent.com/swarmlibs/dockerstack-schema/main/schema/dockerstack-spec.json

x-deploy: &x-deploy
  replicas: 1
  placement:
    max_replicas_per_node: 1
    constraints:
      - node.role == manager
      - node.labels.io.promstack.grafana == true

x-exporter-resources-constraints: &x-exporter-resources-constraints
  limits:
    memory: 128M
  reservations:
    memory: 64M

x-default-logging: &x-default-logging
  options:
    max-size: "12m"
    max-file: "5"
  driver: json-file

services:

  # ====================================================
  # Grafana Dashboard
  # https://github.com/grafana/grafana
  # ====================================================

  grafana:
    image: swarmlibs/grafana:main
    deploy:
      <<: *x-deploy
      labels:
        io.prometheus.enabled: "true"
        io.prometheus.job_name: "grafana"
        io.prometheus.scrape_port: "3000"
    logging: *x-default-logging
    ports:
      - published: 3000
        target: 3000
    hostname: replica-{{.Task.Slot}}.grafana.local
    networks:
      public:
        aliases:
          - grafana.svc.cluster.local
      grafana:
      prometheus_gwnetwork:
    volumes:
      - type: volume
        source: grafana-data
        target: /var/lib/grafana
      - type: volume
        source: grafana-dashboards
        target: /etc/grafana/dashboards
      - type: volume
        source: grafana-provisioning-dashboards
        target: /etc/grafana/provisioning/dashboards
      - type: volume
        source: grafana-provisioning-datasources
        target: /etc/grafana/provisioning/datasources
    depends_on:
      - grafana-dashboard-provider
      - grafana-provisioning-dashboard-provider
      - grafana-provisioning-datasource-provider

  # ====================================================
  # Grafana provisioning config provider & reloader
  # Only 1 replica is needed for each
  # ====================================================
  
  grafana-provisioning-config-reloader:
    image: swarmlibs/grafana-provisioning-config-reloader:main
    environment:
      - GF_SERVER_DOMAIN=replica-{{.Task.Slot}}.grafana.local
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    deploy:
      <<: *x-deploy
      replicas: 1
      resources: *x-exporter-resources-constraints
    logging: *x-default-logging
    networks:
      grafana:
    configs:
      - gf-provisioning-dashboards
      - gf-dashboard-grafana-metrics
      - gf-dashboard-prometheus-stats
      - gf-dashboard-prometheus-stats-v2
      - gf-dashboard-dockerswarm-nodes-dashboard
      - gf-dashboard-dockerswarm-services-endpoints
      - gf-dashboard-dockerswarm-services
    volumes:
      - type: volume
        source: grafana-provisioning-config-reloader
        target: /data
      - type: volume
        source: grafana-provisioning-dashboards
        target: /etc/grafana/provisioning/dashboards
      - type: volume
        source: grafana-provisioning-datasources
        target: /etc/grafana/provisioning/datasources
        read_only: true
    depends_on:
      - grafana

  # Grafana dashboards provider
  grafana-dashboard-provider:
    image: swarmlibs/prometheus-config-provider:main
    command:
      - --output-ext=json
      - --output-dir=/grafana-dashboards.d
      - --prometheus-scrape-config-label=io.grafana.dashboard
    deploy:
      <<: *x-deploy
      replicas: 1
      resources: *x-exporter-resources-constraints
    logging: *x-default-logging
    volumes:
      - type: volume
        source: grafana-dashboards
        target: /grafana-dashboards.d
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true

  # Grafana provisioning config for datasources and dashboards
  grafana-provisioning-dashboard-provider:
    image: swarmlibs/prometheus-config-provider:main
    command:
      - --output-dir=/grafana-provisioning-dashboards.d
      - --prometheus-scrape-config-label=io.grafana.provisioning.dashboard
    deploy:
      <<: *x-deploy
      replicas: 1
      resources: *x-exporter-resources-constraints
    logging: *x-default-logging
    volumes:
      - type: volume
        source: grafana-provisioning-dashboards
        target: /grafana-provisioning-dashboards.d
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
  grafana-provisioning-datasource-provider:
    image: swarmlibs/prometheus-config-provider:main
    command:
      - --output-dir=/grafana-provisioning-datasources.d
      - --prometheus-scrape-config-label=io.grafana.provisioning.datasource
    deploy:
      <<: *x-deploy
      replicas: 1
      resources: *x-exporter-resources-constraints
    logging: *x-default-logging
    volumes:
      - type: volume
        source: grafana-provisioning-datasources
        target: /grafana-provisioning-datasources.d
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true

volumes:
  grafana-data:
  grafana-dashboards:
  grafana-provisioning-dashboards:
  grafana-provisioning-datasources:
  grafana-provisioning-config-reloader:

networks:
  public:
    name: public
    external: true
  prometheus_gwnetwork:
    name: prometheus_gwnetwork
    external: true
  grafana:
    # Internal network for Grafana services

configs:
  # Grafana dashboards provisioning config
  gf-provisioning-dashboards:
    name: gf-provisioning-dashboards-v1
    file: ./provisioning/dashboards/grafana-dashboards.yml
    labels: [ "io.grafana.provisioning.dashboard=true" ]
  # Grafana datasources provisioning config
  # -

  # Grafana & Prometheus dashboards
  gf-dashboard-grafana-metrics:
    name: gf-dashboard-grafana-metrics-v1
    file: ./dashboards/grafana-metrics.json
    labels: [ "io.grafana.dashboard=true" ]
  gf-dashboard-prometheus-stats:
    name: gf-dashboard-prometheus-stats-v1
    file: ./dashboards/prometheus-stats.json
    labels: [ "io.grafana.dashboard=true" ]
  gf-dashboard-prometheus-stats-v2:
    name: gf-dashboard-prometheus-stats-v2
    file: ./dashboards/prometheus-2-0-stats.json
    labels: [ "io.grafana.dashboard=true" ]

  # Docker Swarm specific dashboards
  gf-dashboard-dockerswarm-nodes-dashboard:
    name: gf-dashboard-dockerswarm-nodes-dashboard-v1
    file: ./dashboards/dockerswarm-nodes.json
    labels: [ "io.grafana.dashboard=true" ]
  gf-dashboard-dockerswarm-services-endpoints:
    name: gf-dashboard-dockerswarm-services-endpoints-v1
    file: ./dashboards/dockerswarm-services-endpoints.json
    labels: [ "io.grafana.dashboard=true" ]
  gf-dashboard-dockerswarm-services:
    name: gf-dashboard-dockerswarm-services-v1
    file: ./dashboards/dockerswarm-services.json
    labels: [ "io.grafana.dashboard=true" ]

  # cAdvisor
  gf-dashboard-cadvisor:
    name: gf-dashboard-cadvisor-v1
    file: ./dashboards/cadvisor.json
    labels: [ "io.grafana.dashboard=true" ]
  # Node Exporter
  gf-dashboard-node-exporter:
    name: gf-dashboard-node-exporter-v1
    file: ./dashboards/node-exporter.json
    labels: [ "io.grafana.dashboard=true" ]
