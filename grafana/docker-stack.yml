# yaml-language-server: $schema=https://raw.githubusercontent.com/swarmlibs/dockerstack-schema/main/schema/dockerstack-spec.json

x-default-logging: &x-default-logging
  options:
    max-size: "12m"
    max-file: "5"
  driver: json-file

x-deploy: &x-deploy
  mode: global
  placement:
    max_replicas_per_node: 1
    constraints:
      - node.role == manager
      - node.labels.io.swarmlibs.promstack == true

services:

  # ====================================================
  # Grafana Dashboard
  # https://github.com/grafana/grafana
  # ====================================================

  grafana:
    image: swarmlibs/grafana:local
    deploy:
      <<: *x-deploy
      labels:
        io.prometheus.enabled: "true"
        io.prometheus.job_name: "grafana"
        io.prometheus.scrape_port: "3000"
    logging: *x-default-logging
    ports:
      - published: 3000
        target: 3000
    hostname: replica-{{.Task.Slot}}.grafana.svc.cluster.local
    networks:
      grafana:
        aliases:
          - grafana.svc.cluster.local
      prometheus:
      dockerswarm_ingress:
    volumes:
      - type: volume
        source: grafana-data
        target: /var/lib/grafana
      - type: volume
        source: grafana-provisioning-dashboard
        target: /grafana/dashboards
      - type: volume
        source: grafana-provisioning-datasources
        target: /etc/grafana/provisioning/datasources
    depends_on:
      - grafana-dashboard-provider
      - grafana-datasource-provider

  grafana-provisioning-config-reloader:
    image: swarmlibs/grafana-provisioning-config-reloader:main
    environment:
      - GF_SERVER_DOMAIN=replica-{{.Task.Slot}}.grafana.svc.cluster.local
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GRAFANA_PROVISIONING_CONFIG_RELOADER_NODE_ID={{.Task.Slot}}
    deploy: *x-deploy
    logging: *x-default-logging
    networks:
      grafana:
    volumes:
      - type: volume
        source: grafana-provisioning-config-reloader
        target: /data
      - type: volume
        source: grafana-provisioning-datasources
        target: /etc/grafana/provisioning/datasources
        read_only: true
    depends_on:
      - grafana

  grafana-dashboard-provider:
    image: swarmlibs/prometheus-config-provider:main
    command:
      - --output-ext=json
      - --output-dir=/grafana-provisioning-dashboard.d
      - --prometheus-scrape-config-label=io.grafana.provisioning.dashboard
    deploy: *x-deploy
    logging: *x-default-logging
    volumes:
      - type: volume
        source: grafana-provisioning-dashboard
        target: /grafana-provisioning-dashboard.d
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true

  grafana-datasource-provider:
    image: swarmlibs/prometheus-config-provider:main
    command:
      - --output-dir=/grafana-provisioning-datasources.d
      - --prometheus-scrape-config-label=io.grafana.provisioning.datasource
    deploy: *x-deploy
    logging: *x-default-logging
    volumes:
      - type: volume
        source: grafana-provisioning-datasources
        target: /grafana-provisioning-datasources.d
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true

volumes:
  grafana-data:
  grafana-provisioning-dashboard:
  grafana-provisioning-datasources:
  grafana-provisioning-config-reloader:

networks:
  grafana:
    # Internal network for Grafana services
  prometheus:
    name: prometheus
    external: true
  dockerswarm_ingress:
    name: dockerswarm_ingress
    external: true

configs:
  dockerswarm-nodes-dashboard-v1:
    file: ./dashboards/dockerswarm-nodes.json
    labels:
      - io.grafana.provisioning.dashboard=true
  dockerswarm-services-endpoints-v1:
    file: ./dashboards/dockerswarm-services-endpoints.json
    labels:
      - io.grafana.provisioning.dashboard=true
  dockerswarm-services-v1:
    file: ./dashboards/dockerswarm-services.json
    labels:
      - io.grafana.provisioning.dashboard=true
